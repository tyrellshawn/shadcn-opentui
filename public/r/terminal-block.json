{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "terminal-block",
  "type": "registry:block",
  "title": "Terminal Block",
  "description": "A complete terminal interface with controls and sliders.",
  "files": [
    {
      "path": "registry/new-york/terminal-block/terminal-block.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { Terminal } from \"../terminal/terminal\"\nimport { TerminalControls } from \"../terminal-controls/terminal-controls\"\nimport { cn } from \"../../../lib/utils\"\n\ninterface TerminalBlockProps extends React.HTMLAttributes<HTMLDivElement> {\n  showControls?: boolean\n  prompt?: string\n  welcomeMessage?: string[]\n  maxLines?: number\n  variant?: \"default\" | \"compact\" | \"minimal\"\n}\n\nfunction TerminalBlock({\n  className,\n  showControls = true,\n  prompt = \"user@terminal:~$\",\n  welcomeMessage = [\"Welcome to OpenTUI Terminal Block\", \"Type 'help' for available commands\"],\n  maxLines = 1000,\n  variant = \"default\",\n  ...props\n}: TerminalBlockProps) {\n  const terminalRef = React.useRef<any>(null)\n  \n  const handleCommand = React.useCallback((command: string) => {\n    if (command.startsWith(\"set \")) {\n      const [_, type, value] = command.split(\" \")\n      if (terminalRef.current?.addLine) {\n        terminalRef.current.addLine(`Setting ${type} to ${value}`, \"success\")\n      }\n      return\n    }\n    \n    if (command === \"reset controls\") {\n      if (terminalRef.current?.addLine) {\n        terminalRef.current.addLine(\"Controls reset to default values\", \"success\")\n      }\n      return\n    }\n    \n    if (command === \"save config\") {\n      if (terminalRef.current?.addLine) {\n        terminalRef.current.addLine(\"Configuration saved successfully\", \"success\")\n      }\n      return\n    }\n  }, [])\n\n  return (\n    <div className={cn(\"grid gap-4\", showControls ? \"grid-cols-1 md:grid-cols-4\" : \"\", className)} {...props}>\n      <div className={cn(showControls ? \"col-span-1 md:col-span-3\" : \"w-full\")}>\n        <Terminal\n          ref={terminalRef}\n          prompt={prompt}\n          welcomeMessage={welcomeMessage}\n          maxLines={maxLines}\n          variant={variant}\n          onCommand={(command) => {\n            handleCommand(command)\n          }}\n        />\n      </div>\n      \n      {showControls && (\n        <div className=\"col-span-1\">\n          <TerminalControls onCommand={handleCommand} />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport { TerminalBlock }\nexport type { TerminalBlockProps }",
      "type": "registry:component"
    }
  ]
}