{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "terminal",
  "type": "registry:component",
  "title": "Terminal",
  "description": "A terminal component with command history, input handling, and customizable styling.",
  "files": [
    {
      "path": "registry/new-york/terminal/terminal.tsx",
      "content": "\"use client\"\n\nimport React, { useState, useRef, useCallback, useContext, createContext } from \"react\"\nimport { cn } from \"../../../lib/utils\"\n\ninterface TerminalLine {\n  id: string\n  type: \"input\" | \"output\" | \"error\" | \"success\"\n  content: string\n  timestamp: Date\n}\n\ninterface TerminalCommand {\n  name: string\n  description: string\n  handler: (args: string[], context?: any) => Promise<void> | void\n  category?: \"system\" | \"ui\" | \"data\" | \"custom\"\n  requiresUI?: boolean\n}\n\ninterface TerminalProps extends React.HTMLAttributes<HTMLDivElement> {\n  prompt?: string\n  welcomeMessage?: string[]\n  commands?: TerminalCommand[]\n  onCommand?: (command: string, args: string[]) => Promise<void> | void\n  maxLines?: number\n  showTimestamp?: boolean\n  variant?: \"default\" | \"compact\" | \"minimal\"\n}\n\ninterface TerminalUIComponent {\n  id: string\n  type: \"form\" | \"menu\" | \"slider\" | \"progress\" | \"table\" | \"chart\"\n  props: Record<string, any>\n  active: boolean\n}\n\ninterface TerminalState {\n  mode: \"command\" | \"ui\" | \"form\"\n  activeComponent?: TerminalUIComponent\n  formData: Record<string, any>\n  menuSelection: number\n}\n\ninterface OpenTUIContext {\n  state: TerminalState\n  setState: React.Dispatch<React.SetStateAction<TerminalState>>\n  addUIComponent: (component: TerminalUIComponent) => void\n  removeUIComponent: (id: string) => void\n  updateFormData: (key: string, value: any) => void\n}\n\nconst OpenTUIContext = createContext<OpenTUIContext | null>(null)\n\nexport const useOpenTUI = () => {\n  const context = useContext(OpenTUIContext)\n  if (!context) {\n    throw new Error(\"useOpenTUI must be used within an OpenTUI provider\")\n  }\n  return context\n}\n\nconst createBuiltInCommands = (\n  addLine: (content: string, type?: TerminalLine[\"type\"]) => void,\n  clearLines: () => void,\n  commandHistory: string[],\n  opentuiContext?: OpenTUIContext,\n): TerminalCommand[] => [\n  {\n    name: \"clear\",\n    description: \"Clear the terminal screen\",\n    handler: () => clearLines(),\n  },\n  {\n    name: \"help\",\n    description: \"Show available commands\",\n    handler: () => {\n      addLine(\"Available commands:\", \"success\")\n      addLine(\"  clear      - Clear the terminal screen\")\n      addLine(\"  help       - Show this help message\")\n      addLine(\"  history    - Show command history\")\n      addLine(\"  date       - Show current date and time\")\n      addLine(\"  opentui    - Show OpenTUI information\")\n      addLine(\"  ui         - Enter UI mode for interactive components\")\n      addLine(\"  form       - Create an interactive form\")\n      addLine(\"  menu       - Create an interactive menu\")\n      addLine(\"  progress   - Show a progress bar\")\n      addLine(\"  ascii      - Generate ASCII art\")\n      addLine(\"  table      - Display data in table format\")\n    },\n  },\n  {\n    name: \"history\",\n    description: \"Show command history\",\n    handler: () => {\n      if (commandHistory.length === 0) {\n        addLine(\"No commands in history\")\n        return\n      }\n      addLine(\"Command history:\", \"success\")\n      commandHistory.forEach((cmd, index) => {\n        addLine(`  ${(index + 1).toString().padStart(3)} ${cmd}`)\n      })\n    },\n  },\n  {\n    name: \"date\",\n    description: \"Show current date and time\",\n    handler: () => {\n      addLine(new Date().toLocaleString(), \"success\")\n    },\n  },\n  {\n    name: \"opentui\",\n    description: \"Show OpenTUI information\",\n    category: \"system\",\n    handler: () => {\n      addLine(\"ðŸš€ OpenTUI Terminal Component\", \"success\")\n      addLine(\"Built with React and shadcn/ui\")\n      addLine(\"GitHub: https://github.com/tyrellshawn/shadcn-opentui\")\n      addLine(\"Type 'help' for available commands\")\n    },\n  },\n  {\n    name: \"ui\",\n    description: \"Enter UI mode for interactive components\",\n    category: \"ui\",\n    requiresUI: true,\n    handler: (args) => {\n      if (!opentuiContext) {\n        addLine(\"OpenTUI context not available\", \"error\")\n        return\n      }\n\n      const [componentType] = args\n      if (!componentType) {\n        addLine(\"Available UI components: form, menu, slider, progress\", \"success\")\n        addLine(\"Usage: ui <component-type>\")\n        return\n      }\n\n      opentuiContext.setState((prev) => ({\n        ...prev,\n        mode: \"ui\",\n        activeComponent: {\n          id: `ui-${Date.now()}`,\n          type: componentType as any,\n          props: {},\n          active: true,\n        },\n      }))\n\n      addLine(`Entering ${componentType} UI mode...`, \"success\")\n      addLine(\"Press ESC to return to command mode\")\n    },\n  },\n  {\n    name: \"form\",\n    description: \"Create an interactive form\",\n    category: \"ui\",\n    requiresUI: true,\n    handler: (args) => {\n      if (!opentuiContext) {\n        addLine(\"OpenTUI context not available\", \"error\")\n        return\n      }\n\n      const formFields = args.length > 0 ? args : [\"name\", \"email\"]\n\n      opentuiContext.setState((prev) => ({\n        ...prev,\n        mode: \"form\",\n        activeComponent: {\n          id: `form-${Date.now()}`,\n          type: \"form\",\n          props: { fields: formFields },\n          active: true,\n        },\n      }))\n\n      addLine(`Creating form with fields: ${formFields.join(\", \")}`, \"success\")\n      addLine(\"Use TAB to navigate, ENTER to submit, ESC to cancel\")\n    },\n  },\n  {\n    name: \"menu\",\n    description: \"Create an interactive menu\",\n    category: \"ui\",\n    requiresUI: true,\n    handler: (args) => {\n      if (!opentuiContext) {\n        addLine(\"OpenTUI context not available\", \"error\")\n        return\n      }\n\n      const menuItems = args.length > 0 ? args : [\"Option 1\", \"Option 2\", \"Option 3\"]\n\n      opentuiContext.setState((prev) => ({\n        ...prev,\n        mode: \"ui\",\n        activeComponent: {\n          id: `menu-${Date.now()}`,\n          type: \"menu\",\n          props: { items: menuItems },\n          active: true,\n        },\n        menuSelection: 0,\n      }))\n\n      addLine(`Creating menu with options: ${menuItems.join(\", \")}`, \"success\")\n      addLine(\"Use â†‘â†“ arrows to navigate, ENTER to select, ESC to cancel\")\n    },\n  },\n  {\n    name: \"progress\",\n    description: \"Show a progress bar\",\n    category: \"ui\",\n    handler: async (args) => {\n      const duration = Number.parseInt(args[0]) || 3000\n      const steps = 20\n      const stepDuration = duration / steps\n\n      addLine(\"Starting progress...\", \"success\")\n\n      for (let i = 0; i <= steps; i++) {\n        const percent = Math.round((i / steps) * 100)\n        const filled = \"â–ˆ\".repeat(i)\n        const empty = \"â–‘\".repeat(steps - i)\n        const bar = `[${filled}${empty}] ${percent}%`\n\n        addLine(`Progress: ${bar}`, \"output\")\n\n        if (i < steps) {\n          await new Promise((resolve) => setTimeout(resolve, stepDuration))\n        }\n      }\n\n      addLine(\"Progress complete!\", \"success\")\n    },\n  },\n  {\n    name: \"ascii\",\n    description: \"Generate ASCII art\",\n    category: \"ui\",\n    handler: () => {\n      addLine(\"Generating ASCII art...\", \"success\")\n\n      // Simple ASCII art generator\n      const asciiArt = [\n        \"  ___                   _____ _   _ ___ \",\n        \" / _ \\\\ _ __   ___ _ __  |_   _| | | |_ _|\",\n        \"| | | | '_ \\\\ / _ \\\\ '_ \\\\   | | | | | || | \",\n        \"| |_| | |_) |  __/ | | |  | | | |_| || | \",\n        \" \\\\___/| .__/ \\\\___|_| |_|  |_|  \\\\___/|___|\",\n        \"      |_|                               \",\n      ]\n\n      asciiArt.forEach((line) => addLine(line, \"success\"))\n    },\n  },\n  {\n    name: \"table\",\n    description: \"Display data in table format\",\n    category: \"data\",\n    handler: () => {\n      const sampleData = [\n        [\"Name\", \"Age\", \"City\"],\n        [\"Alice\", \"25\", \"New York\"],\n        [\"Bob\", \"30\", \"San Francisco\"],\n        [\"Charlie\", \"35\", \"Chicago\"],\n      ]\n\n      addLine(\"Sample Data Table:\", \"success\")\n      sampleData.forEach((row, index) => {\n        const formattedRow = row.map((cell) => cell.padEnd(12)).join(\" | \")\n        addLine(index === 0 ? `| ${formattedRow} |` : `| ${formattedRow} |`, \"output\")\n        if (index === 0) {\n          addLine(`|${\"-\".repeat(formattedRow.length + 2)}|`, \"output\")\n        }\n      })\n    },\n  },\n]\n\nconst Terminal = React.forwardRef<HTMLDivElement, TerminalProps>(\n  (\n    {\n      className,\n      prompt = \"user@terminal:~$\",\n      welcomeMessage = [\"Welcome to OpenTUI Terminal\", \"Type 'help' for available commands\"],\n      commands = [],\n      onCommand,\n      maxLines = 1000,\n      showTimestamp = false,\n      variant = \"default\",\n      ...props\n    },\n    ref,\n  ) => {\n    const [lines, setLines] = useState<TerminalLine[]>(() =>\n      welcomeMessage.map((content, index) => ({\n        id: `welcome-${index}`,\n        type: \"output\" as const,\n        content,\n        timestamp: new Date(),\n      })),\n    )\n\n    const [currentInput, setCurrentInput] = useState(\"\")\n    const [isProcessing, setIsProcessing] = useState(false)\n    const [commandHistory, setCommandHistory] = useState<string[]>([])\n    const [historyIndex, setHistoryIndex] = useState(-1)\n    const [cursorPosition, setCursorPosition] = useState(0)\n\n    const inputRef = useRef<HTMLInputElement>(null)\n    const terminalRef = useRef<HTMLDivElement>(null)\n    const lineIdCounter = useRef(0)\n\n    const [opentuiState, setOpentuiState] = useState<TerminalState>({\n      mode: \"command\",\n      formData: {},\n      menuSelection: 0,\n    })\n\n    const opentuiContext: OpenTUIContext = {\n      state: opentuiState,\n      setState: setOpentuiState,\n      addUIComponent: (component) => {\n        setOpentuiState((prev) => ({\n          ...prev,\n          activeComponent: component,\n        }))\n      },\n      removeUIComponent: (id) => {\n        setOpentuiState((prev) => ({\n          ...prev,\n          activeComponent: prev.activeComponent?.id === id ? undefined : prev.activeComponent,\n        }))\n      },\n      updateFormData: (key, value) => {\n        setOpentuiState((prev) => ({\n          ...prev,\n          formData: { ...prev.formData, [key]: value },\n        }))\n      },\n    }\n\n    const addLine = useCallback(\n      (content: string, type: TerminalLine[\"type\"] = \"output\") => {\n        const newLine: TerminalLine = {\n          id: `line-${lineIdCounter.current++}`,\n          type,\n          content,\n          timestamp: new Date(),\n        }\n\n        setLines((prev) => {\n          const newLines = [...prev, newLine]\n          return newLines.length > maxLines ? newLines.slice(-maxLines) : newLines\n        })\n      },\n      [maxLines],\n    )\n\n    const clearLines = useCallback(() => {\n      setLines([])\n    }, [])\n\n    const builtInCommands = createBuiltInCommands(addLine, clearLines, commandHistory, opentuiContext)\n    const allCommands = [...builtInCommands, ...commands]\n\n    const processCommand = useCallback(\n      async (input: string) => {\n        const [commandName, ...args] = input.trim().split(/\\s+/)\n        const command = allCommands.find((cmd) => cmd.name === commandName)\n\n        if (command) {\n          try {\n            await command.handler(args, opentuiContext)\n          } catch (error) {\n            addLine(\n              `Error executing ${commandName}: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n              \"error\",\n            )\n          }\n        } else if (onCommand) {\n          try {\n            await onCommand(input, args)\n          } catch (error) {\n            addLine(`Error: ${error instanceof Error ? error.message : \"Unknown error\"}`, \"error\")\n          }\n        } else {\n          addLine(`Command not found: ${commandName}`, \"error\")\n          addLine(\"Type 'help' for available commands\")\n        }\n      },\n      [onCommand, addLine, allCommands],\n    )\n\n    const handleCommand = async (command: string) => {\n      if (!command.trim()) return\n\n      setCommandHistory((prev) => [...prev, command])\n      setHistoryIndex(-1)\n\n      const inputLine = showTimestamp\n        ? `[${new Date().toLocaleTimeString()}] ${prompt} ${command}`\n        : `${prompt} ${command}`\n\n      addLine(inputLine, \"input\")\n      setCurrentInput(\"\")\n      setIsProcessing(true)\n\n      try {\n        await processCommand(command)\n      } finally {\n        setIsProcessing(false)\n        setTimeout(() => {\n          inputRef.current?.focus()\n        }, 0)\n      }\n    }\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (opentuiState.mode === \"ui\" && opentuiState.activeComponent?.type === \"menu\") {\n        if (e.key === \"ArrowUp\") {\n          e.preventDefault()\n          setOpentuiState((prev) => ({\n            ...prev,\n            menuSelection: Math.max(0, prev.menuSelection - 1),\n          }))\n          return\n        } else if (e.key === \"ArrowDown\") {\n          e.preventDefault()\n          const maxItems = opentuiState.activeComponent?.props.items?.length || 0\n          setOpentuiState((prev) => ({\n            ...prev,\n            menuSelection: Math.min(maxItems - 1, prev.menuSelection + 1),\n          }))\n          return\n        } else if (e.key === \"Enter\") {\n          e.preventDefault()\n          const selectedItem = opentuiState.activeComponent?.props.items?.[opentuiState.menuSelection]\n          if (selectedItem) {\n            addLine(`Selected: ${selectedItem}`, \"success\")\n            setOpentuiState((prev) => ({ ...prev, mode: \"command\", activeComponent: undefined }))\n          }\n          return\n        }\n      }\n\n      if (e.key === \"Escape\" && opentuiState.mode !== \"command\") {\n        e.preventDefault()\n        setOpentuiState((prev) => ({ ...prev, mode: \"command\", activeComponent: undefined }))\n        addLine(\"Exited UI mode\", \"success\")\n        return\n      }\n\n      setTimeout(() => {\n        if (inputRef.current) {\n          setCursorPosition(inputRef.current.selectionStart || 0)\n        }\n      }, 0)\n\n      if (e.key === \"Enter\") {\n        e.preventDefault()\n        handleCommand(currentInput)\n      } else if (e.key === \"ArrowUp\") {\n        e.preventDefault()\n        if (commandHistory.length > 0) {\n          const newIndex = historyIndex === -1 ? commandHistory.length - 1 : Math.max(0, historyIndex - 1)\n          setHistoryIndex(newIndex)\n          setCurrentInput(commandHistory[newIndex])\n        }\n      } else if (e.key === \"ArrowDown\") {\n        e.preventDefault()\n        if (historyIndex !== -1) {\n          const newIndex = historyIndex + 1\n          if (newIndex >= commandHistory.length) {\n            setHistoryIndex(-1)\n            setCurrentInput(\"\")\n          } else {\n            setHistoryIndex(newIndex)\n            setCurrentInput(commandHistory[newIndex])\n          }\n        }\n      } else if (e.key === \"Tab\") {\n        e.preventDefault()\n        const commandNames = allCommands.map((cmd) => cmd.name)\n        const matches = commandNames.filter((cmd) => cmd.startsWith(currentInput))\n\n        if (matches.length === 1) {\n          setCurrentInput(matches[0])\n        } else if (matches.length > 1) {\n          addLine(`Available completions: ${matches.join(\", \")}`, \"success\")\n        }\n      } else if (e.key === \"l\" && e.ctrlKey) {\n        e.preventDefault()\n        clearLines()\n      }\n    }\n\n    const renderUIComponent = () => {\n      if (!opentuiState.activeComponent) return null\n\n      const { type, props } = opentuiState.activeComponent\n\n      switch (type) {\n        case \"menu\":\n          return (\n            <div className=\"border border-green-400/20 rounded p-2 mb-2 bg-black/50\">\n              <div className=\"text-green-400 text-xs mb-2\">MENU (Use â†‘â†“ arrows, ENTER to select)</div>\n              {props.items?.map((item: string, index: number) => (\n                <div\n                  key={index}\n                  className={cn(\n                    \"px-2 py-1 font-mono text-sm\",\n                    index === opentuiState.menuSelection ? \"bg-green-400 text-black\" : \"text-green-400\",\n                  )}\n                >\n                  {index === opentuiState.menuSelection ? \"â–º \" : \"  \"}\n                  {item}\n                </div>\n              ))}\n            </div>\n          )\n        case \"form\":\n          return (\n            <div className=\"border border-green-400/20 rounded p-2 mb-2 bg-black/50\">\n              <div className=\"text-green-400 text-xs mb-2\">FORM (TAB to navigate, ENTER to submit)</div>\n              {props.fields?.map((field: string, index: number) => (\n                <div key={index} className=\"mb-2\">\n                  <label className=\"text-green-400 text-sm block mb-1\">{field}:</label>\n                  <input\n                    type=\"text\"\n                    className=\"w-full bg-transparent border border-green-400/20 rounded px-2 py-1 text-green-400 font-mono text-sm focus:border-green-400 outline-none\"\n                    placeholder={`Enter ${field}`}\n                  />\n                </div>\n              ))}\n            </div>\n          )\n        default:\n          return null\n      }\n    }\n\n    const getVariantStyles = () => {\n      switch (variant) {\n        case \"compact\":\n          return \"p-2 text-xs\"\n        case \"minimal\":\n          return \"p-3 border-0 shadow-none\"\n        default:\n          return \"p-4 text-sm shadow-2xl shadow-green-400/10\"\n      }\n    }\n\n    const getHeightClass = () => {\n      switch (variant) {\n        case \"compact\":\n          return \"h-64\"\n        case \"minimal\":\n          return \"h-48\"\n        default:\n          return \"h-96\"\n      }\n    }\n\n    return (\n      <OpenTUIContext.Provider value={opentuiContext}>\n        <div\n          ref={ref}\n          className={cn(\n            \"bg-black text-green-400 font-mono rounded-lg border border-border overflow-hidden\",\n            getVariantStyles(),\n            className,\n          )}\n          onClick={() => {\n            if (inputRef.current && !isProcessing) {\n              inputRef.current.focus()\n            }\n          }}\n          {...props}\n        >\n          {variant !== \"minimal\" && (\n            <div className=\"flex items-center justify-between mb-2 pb-2 border-b border-green-400/20\">\n              <div className=\"text-green-400 text-xs font-semibold\">\n                OpenTUI Terminal {opentuiState.mode !== \"command\" && `- ${opentuiState.mode.toUpperCase()} MODE`}\n              </div>\n              <div className=\"text-green-400/60 text-xs\">Ctrl+L to clear</div>\n            </div>\n          )}\n\n          <div\n            ref={terminalRef}\n            className={cn(\n              \"overflow-y-auto scrollbar-thin scrollbar-thumb-muted-foreground scrollbar-track-transparent\",\n              getHeightClass(),\n            )}\n            onClick={(e) => {\n              e.stopPropagation()\n              if (inputRef.current && !isProcessing) {\n                inputRef.current.focus()\n              }\n            }}\n          >\n            {lines.map((line) => (\n              <div\n                key={line.id}\n                className={cn(\n                  \"whitespace-pre-wrap break-words leading-relaxed mb-1\",\n                  line.type === \"input\" && \"text-white font-semibold\",\n                  line.type === \"error\" && \"text-red-400\",\n                  line.type === \"success\" && \"text-emerald-400\",\n                  line.type === \"output\" && \"text-green-400\",\n                )}\n              >\n                {line.content}\n              </div>\n            ))}\n\n            {renderUIComponent()}\n\n            <div className=\"flex items-center text-white mt-1 relative\">\n              <span className=\"text-green-400 mr-2 font-bold shrink-0\">{prompt}</span>\n              <div className=\"flex-1 relative\">\n                <input\n                  ref={inputRef}\n                  type=\"text\"\n                  value={currentInput}\n                  onChange={(e) => {\n                    setCurrentInput(e.target.value)\n                    setCursorPosition(e.target.selectionStart || 0)\n                  }}\n                  onKeyDown={handleKeyDown}\n                  onSelect={() => {\n                    if (inputRef.current) {\n                      setCursorPosition(inputRef.current.selectionStart || 0)\n                    }\n                  }}\n                  onClick={() => {\n                    if (inputRef.current) {\n                      setCursorPosition(inputRef.current.selectionStart || 0)\n                    }\n                  }}\n                  disabled={isProcessing}\n                  className=\"w-full bg-transparent border-none outline-none text-white font-mono caret-transparent\"\n                  autoComplete=\"off\"\n                  spellCheck={false}\n                  placeholder={\n                    isProcessing\n                      ? \"Processing...\"\n                      : opentuiState.mode !== \"command\"\n                        ? `${opentuiState.mode.toUpperCase()} mode - ESC to exit`\n                        : \"Type a command...\"\n                  }\n                />\n                <div\n                  className=\"absolute top-0 w-2 h-5 bg-green-400 pointer-events-none\"\n                  style={{\n                    left: `${cursorPosition * 0.6}em`,\n                    animation: \"blink 1s infinite\",\n                  }}\n                />\n              </div>\n              {isProcessing && <span className=\"ml-2 text-yellow-400 animate-pulse\">âš¡</span>}\n            </div>\n          </div>\n\n          <style>{`\n            @keyframes blink {\n              0%, 50% { opacity: 1; }\n              51%, 100% { opacity: 0; }\n            }\n          `}</style>\n        </div>\n      </OpenTUIContext.Provider>\n    )\n  },\n)\n\nTerminal.displayName = \"Terminal\"\n\nexport { Terminal }\nexport type { TerminalProps, TerminalLine, TerminalCommand, OpenTUIContext }",
      "type": "registry:component"
    }
  ]
}