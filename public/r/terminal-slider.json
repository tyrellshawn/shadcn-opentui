{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "terminal-slider",
  "type": "registry:component",
  "title": "Terminal Slider",
  "description": "A slider component with ASCII visualization for terminal interfaces.",
  "files": [
    {
      "path": "registry/new-york/terminal-slider/terminal-slider.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\nimport { cn } from \"../../../lib/utils\"\n\ninterface TerminalSliderProps extends React.ComponentProps<typeof SliderPrimitive.Root> {\n  label?: string\n  showValue?: boolean\n  unit?: string\n  ascii?: boolean\n  width?: number\n}\n\nfunction TerminalSlider({\n  className,\n  label,\n  showValue = true,\n  unit = \"\",\n  ascii = false,\n  width = 20,\n  value,\n  defaultValue,\n  min = 0,\n  max = 100,\n  ...props\n}: TerminalSliderProps) {\n  const [internalValue, setInternalValue] = React.useState(value || defaultValue || [min])\n\n  const currentValue = value || internalValue\n  const displayValue = Array.isArray(currentValue) ? currentValue[0] : currentValue\n\n  const createAsciiBar = (val: number, total: number, barWidth: number) => {\n    const filled = Math.round((val / total) * barWidth)\n    const empty = barWidth - filled\n    return \"█\".repeat(filled) + \"░\".repeat(empty)\n  }\n\n  const handleValueChange = (newValue: number[]) => {\n    setInternalValue(newValue)\n    props.onValueChange?.(newValue)\n  }\n\n  return (\n    <div className={cn(\"space-y-2 font-mono\", className)}>\n      {label && (\n        <div className=\"flex items-center justify-between text-sm\">\n          <span className=\"text-green-400\">{label}</span>\n          {showValue && (\n            <span className=\"text-muted-foreground\">\n              {displayValue}\n              {unit}\n            </span>\n          )}\n        </div>\n      )}\n\n      {ascii ? (\n        <div className=\"space-y-1\">\n          <div className=\"text-xs text-green-400 font-mono\">\n            [{createAsciiBar(displayValue, max, width)}] {displayValue}\n            {unit}\n          </div>\n          <SliderPrimitive.Root\n            value={currentValue}\n            defaultValue={defaultValue}\n            min={min}\n            max={max}\n            onValueChange={handleValueChange}\n            className=\"relative flex w-full touch-none items-center select-none opacity-0 absolute inset-0\"\n            {...props}\n          >\n            <SliderPrimitive.Track className=\"bg-transparent relative grow overflow-hidden h-4 w-full\">\n              <SliderPrimitive.Range className=\"bg-transparent absolute h-full\" />\n            </SliderPrimitive.Track>\n            <SliderPrimitive.Thumb className=\"bg-transparent border-transparent block size-4 shrink-0\" />\n          </SliderPrimitive.Root>\n        </div>\n      ) : (\n        <SliderPrimitive.Root\n          value={currentValue}\n          defaultValue={defaultValue}\n          min={min}\n          max={max}\n          onValueChange={handleValueChange}\n          className={cn(\"relative flex w-full touch-none items-center select-none\", \"data-[disabled]:opacity-50\")}\n          {...props}\n        >\n          <SliderPrimitive.Track className=\"bg-muted/30 border border-green-400/20 relative grow overflow-hidden rounded-none h-2 w-full\">\n            <SliderPrimitive.Range className=\"bg-green-400 absolute h-full\" />\n          </SliderPrimitive.Track>\n          <SliderPrimitive.Thumb className=\"border-green-400 bg-green-400 ring-green-400/50 block size-3 shrink-0 rounded-none border shadow-sm transition-[color,box-shadow] hover:ring-2 focus-visible:ring-2 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\" />\n        </SliderPrimitive.Root>\n      )}\n\n      <div className=\"flex justify-between text-xs text-muted-foreground font-mono\">\n        <span>\n          {min}\n          {unit}\n        </span>\n        <span>\n          {max}\n          {unit}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nexport { TerminalSlider }",
      "type": "registry:component"
    }
  ]
}